{
  "version": 3,
  "sources": ["../predictionRamda.mjs", "../keyboard.js"],
  "sourcesContent": ["import * as R from \"ramda\";\r\n\r\nexport let wordFrequencyMap = {};\r\nexport let markovWordTransitions = {};\r\nexport let markovLetterTransitions = {};\r\n\r\n/**\r\n * Initialise la fr\u00E9quence des mots du corpus\r\n * @param {string[]} tokens - Liste de tokens extraits du corpus\r\n */\r\nexport function setCorpusWords(tokens) {\r\n    wordFrequencyMap = {};\r\n    tokens.forEach(token => {\r\n        const word = token.toLowerCase();\r\n        wordFrequencyMap[word] = (wordFrequencyMap[word] || 0) + 1;\r\n    });\r\n}\r\n\r\n/**\r\n * Charge les mod\u00E8les Markov pr\u00E9-entra\u00EEn\u00E9s\r\n * @param {Object} wordTransitions - Transitions entre mots (bigrammes)\r\n * @param {Object} letterTransitions - Transitions entre lettres\r\n */\r\nexport function loadMarkovModels(wordTransitions, letterTransitions) {\r\n    markovWordTransitions = wordTransitions;\r\n    markovLetterTransitions = letterTransitions;\r\n}\r\n\r\n/**\r\n * Pr\u00E9dit les prochaines lettres en combinant contexte, transitions de mots et transitions de lettres\r\n * @param {string[]} context - Contexte pr\u00E9c\u00E9dent (mots avant le mot actuel)\r\n * @param {string} currentPrefix - D\u00E9but du mot en cours d'\u00E9criture\r\n * @returns {Object} - Objet { lettre: probabilit\u00E9 } tri\u00E9 par probabilit\u00E9 d\u00E9croissante\r\n */\r\nexport function predictNextLetters(context, currentPrefix) {\r\n    const currentPrefixLower = currentPrefix.toLowerCase();\r\n    const contextLower = context.map(w => w.toLowerCase());\r\n\r\n    // 1. Probabilit\u00E9s bas\u00E9es sur la compl\u00E9tion de mot (sans contexte)\r\n    const wordCompletionProbs = getWordCompletionProbs(currentPrefixLower);\r\n\r\n    // 2. Probabilit\u00E9s bas\u00E9es sur le contexte (bigrammes de mots)\r\n    const contextBasedProbs = getContextBasedProbs(contextLower, currentPrefixLower);\r\n\r\n    // 3. Probabilit\u00E9s bas\u00E9es sur les transitions de lettres\r\n    const letterTransitionProbs = getLetterTransitionProbs(currentPrefixLower);\r\n\r\n    // Combinaison pond\u00E9r\u00E9e des mod\u00E8les\r\n    const combinedProbs = combineProbabilities(\r\n        wordCompletionProbs,\r\n        contextBasedProbs,\r\n        letterTransitionProbs\r\n    );\r\n\r\n    return combinedProbs;\r\n}\r\n\r\nfunction getWordCompletionProbs(prefix) {\r\n    const counts = {};\r\n    let total = 0;\r\n\r\n    Object.entries(wordFrequencyMap).forEach(([word, freq]) => {\r\n        if (word.startsWith(prefix) && word.length > prefix.length) {\r\n            const nextChar = word[prefix.length];\r\n            counts[nextChar] = (counts[nextChar] || 0) + freq;\r\n            total += freq;\r\n        }\r\n    });\r\n\r\n    return total > 0\r\n        ? normalizeProbs(counts, total)\r\n        : {};\r\n}\r\n\r\nfunction getContextBasedProbs(context, prefix) {\r\n    if (context.length === 0) return {};\r\n\r\n    // Utilise les 2 derniers mots du contexte\r\n    const contextKey = context.slice(-2).join(' ');\r\n    const nextWordDist = markovWordTransitions[contextKey] || {};\r\n\r\n    // Filtre les mots commen\u00E7ant par le pr\u00E9fixe\r\n    const filteredWords = Object.entries(nextWordDist)\r\n        .filter(([word]) => word.startsWith(prefix))\r\n        .filter(([word]) => word.length > prefix.length);\r\n\r\n    // Agr\u00E8ge par prochaine lettre\r\n    const counts = {};\r\n    let total = 0;\r\n\r\n    filteredWords.forEach(([word, prob]) => {\r\n        const nextChar = word[prefix.length];\r\n        counts[nextChar] = (counts[nextChar] || 0) + prob;\r\n        total += prob;\r\n    });\r\n\r\n    return total > 0\r\n        ? normalizeProbs(counts, total)\r\n        : {};\r\n}\r\n\r\nfunction getLetterTransitionProbs(prefix) {\r\n    if (prefix.length === 0) return {};\r\n\r\n    // Prend les 2 derniers caract\u00E8res du pr\u00E9fixe\r\n    const lastChars = prefix.slice(-2);\r\n    const transitions = markovLetterTransitions[lastChars] || {};\r\n\r\n    return normalizeProbs(transitions, Object.values(transitions).reduce((a, b) => a + b, 0));\r\n}\r\n\r\nfunction combineProbabilities(probsA, probsB, probsC) {\r\n    const weights = { A: 0.4, B: 0.4, C: 0.2 }; // Poids ajustables\r\n    const combined = {};\r\n    const allKeys = new Set([\r\n        ...Object.keys(probsA),\r\n        ...Object.keys(probsB),\r\n        ...Object.keys(probsC)\r\n    ]);\r\n\r\n    allKeys.forEach(key => {\r\n        combined[key] =\r\n            (probsA[key] || 0) * weights.A +\r\n            (probsB[key] || 0) * weights.B +\r\n            (probsC[key] || 0) * weights.C;\r\n    });\r\n\r\n    // Normalisation finale\r\n    return normalizeAndSort(combined);\r\n}\r\n\r\nfunction normalizeProbs(counts, total) {\r\n    return Object.fromEntries(\r\n        Object.entries(counts).map(([key, value]) => [key, value / total])\r\n    );\r\n}\r\n\r\nfunction normalizeAndSort(probs) {\r\n    const total = Object.values(probs).reduce((sum, val) => sum + val, 0);\r\n    if (total <= 0) return { ' ': 1 }; // Cas par d\u00E9faut\r\n\r\n    //trier selon la probabilit\u00E9\r\n    const normalized = R.pipe(\r\n        R.mapObjIndexed(val => val / total),\r\n        R.toPairs,\r\n        R.sortBy(R.last),\r\n        R.reverse,\r\n        R.fromPairs\r\n    )(probs);\r\n\r\n\r\n\r\n    return normalized;\r\n}", "import * as R from 'ramda';\r\n\r\nimport {\r\n    predictNextLetters,\r\n    setCorpusWords,\r\n    loadMarkovModels\r\n} from \"./predictionRamda.mjs\";\r\n\r\n// Initialisation des mod\u00E8les au chargement du module\r\nlet modelsInitialized = false;\r\n\r\n// Fonction pour initialiser les mod\u00E8les\r\nasync function initializePredictionModels() {\r\n    if (modelsInitialized) return;\r\n    \r\n    try {\r\n        // V\u00E9rification de l'API de pr\u00E9diction\r\n        if (!window.predictionAPI) {\r\n            throw new Error('Impossible d\\'acc\u00E9der \u00E0 l\\'API de pr\u00E9diction');\r\n        }\r\n\r\n        console.log('Chargement du corpus...');\r\n        // Chargement du corpus depuis les fichiers du dataset\r\n        const corpusTokens = await window.predictionAPI.loadCorpus();\r\n        if (corpusTokens.length === 0) {\r\n            throw new Error('Le corpus est vide');\r\n        }\r\n        \r\n        // Initialisation du corpus de mots\r\n        setCorpusWords(corpusTokens);\r\n        console.log(`Corpus initialis\u00E9 avec ${corpusTokens.length} tokens`);\r\n        \r\n        // Chargement des mod\u00E8les Markov\r\n        console.log('Chargement des mod\u00E8les Markov...');\r\n        const { wordTransitions, letterTransitions } = await window.predictionAPI.loadMarkovModels();\r\n        loadMarkovModels(wordTransitions, letterTransitions);\r\n        \r\n        modelsInitialized = true;\r\n        console.log('Mod\u00E8les de pr\u00E9diction initialis\u00E9s avec succ\u00E8s');\r\n    } catch (error) {\r\n        console.error('Erreur lors de l\\'initialisation des mod\u00E8les:', error);\r\n    }\r\n}\r\n\r\nconst Keyboard = {\r\n    elements: {\r\n        main: null,\r\n        keysContainer: null,\r\n        keys: [],\r\n        capsKey: null,\r\n    },\r\n\r\n    properties: {\r\n        value: \"\",\r\n        capsLock: false,\r\n        keyboardInputs: null,\r\n        keyLayout: [\r\n            \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"backspace\",\r\n            \"a\", \"z\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\",\r\n            \"caps\", \"q\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"enter\",\r\n            \"done\", \"w\", \"x\", \"c\", \"v\", \"b\", \"n\", \",\", \";\", \":\", \"!\", \"space\",\r\n        ],\r\n    },\r\n\r\n    async init() {\r\n        // Initialisation des mod\u00E8les de pr\u00E9diction\r\n        await initializePredictionModels();\r\n        \r\n        // create and setup main element\r\n        this.elements.main = document.createElement(\"div\");\r\n        this.elements.main.classList.add(\"keyboard\");\r\n        document.body.appendChild(this.elements.main);\r\n\r\n        // create and setup child container component\r\n        this.elements.keysContainer =\r\n            document.createElement(\"div\");\r\n        this.elements.keysContainer\r\n            .classList.add(\"keyboard__keys\");\r\n        this.elements.main\r\n            .appendChild(this.elements.keysContainer);\r\n\r\n        // create and setup key elements\r\n        this.elements.keysContainer\r\n            .appendChild(this._createKeys());\r\n        this.elements.keys =\r\n            this.elements.keysContainer\r\n                .querySelectorAll(\".keyboard__key\");\r\n\r\n        // open keyboard for elements with .use-keyboard-input\r\n        this.properties.keyboardInputs =\r\n            document.querySelectorAll(\r\n                \".use-keyboard-input\"\r\n            );\r\n        this.properties\r\n            .keyboardInputs\r\n            .forEach((element) => {\r\n                element.addEventListener(\"focus\", () => {\r\n                    this\r\n                        .open(element.value, (currentValue) => {\r\n                            element.value = currentValue;\r\n                        });\r\n                });\r\n            });\r\n    },\r\n\r\n    _createIconHTML(icon_name) {\r\n        return `<span class=\"material-icons\">${icon_name}</span>`;\r\n    },\r\n\r\n    _createKeyBtn(iconName = \"\", class1 = \"\", onclick = () => {}, class2 = \"\", dataChar = null) {\r\n        this.keyElement = document.createElement(\"button\");\r\n\r\n        this.keyElement.setAttribute(\"type\", \"button\");\r\n        this.keyElement.classList.add(\"keyboard__key\");\r\n\r\n        if (class1) this.keyElement.classList.add(class1);\r\n        if (class2) this.keyElement.classList.add(class2);\r\n\r\n        if (iconName) {\r\n            this.keyElement.innerHTML = this._createIconHTML(iconName);\r\n        }\r\n\r\n        if (dataChar !== null) {\r\n            this.keyElement.dataset.char = dataChar;\r\n        }\r\n\r\n        this.keyElement.addEventListener(\"click\", onclick);\r\n\r\n        return this.keyElement;\r\n    },\r\n\r\n\r\n    _createKeys() {\r\n        const fragment =\r\n            document.createDocumentFragment();\r\n\r\n        this.properties.keyLayout.forEach((key) => {\r\n            const insertLineBreak =\r\n                [\"backspace\", \"p\", \"enter\", \"?\"].indexOf(key) !== -1;\r\n\r\n            switch (key) {\r\n                case \"backspace\":\r\n                    this._createKeyBtn(\r\n                        \"backspace\", \"keyboard__key--wide\",\r\n                        () => {\r\n                            this.properties.value =\r\n                                this.properties.value.slice(0, -1);\r\n                            this._updateValueInTarget();\r\n                        });\r\n                    break;\r\n\r\n                case \"caps\":\r\n                    this._createKeyBtn(\r\n                        \"keyboard_capslock\",\r\n                        \"keyboard__key--activatable\",\r\n                        () => {\r\n                            this.elements.capsKey\r\n                                .classList\r\n                                .toggle(\"keyboard__key--active\");\r\n                            this._toggleCapsLock();\r\n                        },\r\n                        \"keyboard__key--wide\"\r\n                    );\r\n                    this.elements.capsKey = this.keyElement;\r\n                    break;\r\n\r\n                case \"enter\":\r\n                    this._createKeyBtn(\r\n                        \"keyboard_return\", \"keyboard__key--wide\",\r\n                        () => {\r\n                            this.properties.value += \"\\n\";\r\n                            this._updateValueInTarget();\r\n                        });\r\n                    break;\r\n\r\n                case \"space\":\r\n                    const spaceBtn = this._createKeyBtn(\r\n                        \"space_bar\",\r\n                        \"keyboard__key--extra--wide\",\r\n                        () => {\r\n                            this.properties.value += \" \";\r\n                            this._updateValueInTarget();\r\n                        },\r\n                        \"\", // pas de class2\r\n                        \" \" // data-char pour la touche espace\r\n                    );\r\n                    fragment.appendChild(spaceBtn);\r\n                    break;\r\n\r\n\r\n                case \"done\":\r\n                    this._createKeyBtn(\r\n                        \"check_circle\",\r\n                        \"keyboard__key--dark\",\r\n                        () => {\r\n                            this.close();\r\n                            this._updateValueInTarget();\r\n                        },\r\n                        \"keyboard__key--wide\"\r\n                    );\r\n                    break;\r\n\r\n                default:\r\n                    this._createKeyBtn(\"\", \"\", () => {\r\n                        // Ajout du caract\u00E8re\r\n                        this.properties.value += this.properties.capsLock\r\n                            ? key.toUpperCase()\r\n                            : key.toLowerCase();\r\n\r\n                        this._updateValueInTarget();\r\n\r\n                        // Trouver le mot actuel\r\n                        const currentValue = this.properties.value.trim().split(/\\s+/);\r\n                        const lastWord = currentValue[currentValue.length - 1] || \"\";\r\n\r\n                        const context = currentValue.slice(0, -1); // \u26A0\uFE0F important\r\n                        const { options } = getNextWordProbabilities(context);\r\n\r\n                        const word = completeWord(lastWord, options);\r\n\r\n\r\n                        console.log(\"Valeur tap\u00E9e :\", this.properties.value);\r\n                        console.log(\"Mot en cours :\", lastWord);\r\n                        console.log(\"Contexte :\", context);\r\n                        console.log(\"Options:\", options);\r\n                        console.log(\"Mots en train de taper pr\u00E9dit:\", word);\r\n                        console.log(\"Letter probs (filtered):\", predictNextLetterProbs(lastWord, options));\r\n                        console.log(\"most probable letter:\", getMostProbableNextLetter(lastWord, options));\r\n\r\n\r\n                        //pr\u00E9dire les prochaines lettres en fonctione des mots pr\u00E9c\u00E9dents et du mot en cours\r\n\r\n                        let letterProbs = predictNextLetterProbs(lastWord, options);\r\n\r\n                        this.elements.keys.forEach((keyEl) => {\r\n                            //const char = keyEl.textContent.toLowerCase();\r\n                            const char = (keyEl.dataset.char || keyEl.textContent.trim()).toLowerCase();\r\n\r\n                            if (!letterProbs[char]) {\r\n                                keyEl.classList.remove(\"activeYellow\");\r\n                                keyEl.classList.remove(\"activePurple\");\r\n                            }\r\n                            const prob = letterProbs[char];\r\n\r\n                            if (prob > 0.2) {\r\n                                keyEl.classList.add(\"activePurple\");\r\n                                keyEl.classList.remove(\"activeYellow\");\r\n                            } else if (prob > 0 && prob <= 0.2) {\r\n                                keyEl.classList.add(\"activeYellow\");\r\n                                keyEl.classList.remove(\"activePurple\");\r\n                            } else {\r\n                                keyEl.classList.remove(\"activeYellow\");\r\n                                keyEl.classList.remove(\"activePurple\");\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                    });\r\n\r\n                    // Affichage de la lettre sur la touche\r\n                    this.keyElement.textContent = key.toLowerCase();\r\n                    break;\r\n\r\n            }\r\n\r\n            fragment.appendChild(this.keyElement);\r\n\r\n            if (insertLineBreak) {\r\n                fragment\r\n                    .appendChild(document.createElement(\"br\"));\r\n            }\r\n        });\r\n        return fragment;\r\n\r\n\r\n    },\r\n\r\n    _updateValueInTarget() {\r\n        this.properties\r\n            .keyboardInputs\r\n            .forEach((keyboard) => {\r\n                keyboard.value =\r\n                    this.properties.value;\r\n            });\r\n    },\r\n\r\n    _toggleCapsLock() {\r\n        this.properties.capsLock =\r\n            !this.properties.capsLock;\r\n\r\n        for (let key of this.elements.keys) {\r\n            if (key.childElementCount === 0) {\r\n                key.textContent =\r\n                    this.properties.capsLock\r\n                        ? key.textContent.toUpperCase()\r\n                        : key.textContent.toLowerCase();\r\n            }\r\n        }\r\n    },\r\n\r\n    open(initialValue, oninput) {\r\n        this.properties.value =\r\n            initialValue || \"\";\r\n        this.elements.main\r\n            .classList\r\n            .remove(\"keyboard--hidden\");\r\n        this.elements.main.classList.add(\"keyboard--visible\");\r\n    },\r\n\r\n    close() {\r\n        this.elements.main.classList.remove(\"keyboard--visible\");\r\n        this.properties.value = this.properties.value;\r\n        this.elements.main\r\n            .classList.add(\"keyboard--hidden\");\r\n    },\r\n\r\n\r\n};\r\n\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", async () => {\r\n    await loadMarkovData();\r\n    Keyboard.init();\r\n    // Ajout d'une animation douce pour le clavier\r\n    setTimeout(() => {\r\n        Keyboard.elements.main.classList.add(\"keyboard--visible\");\r\n    }, 100); // petit d\u00E9lai pour d\u00E9clencher la transition CSS\r\n\r\n});\r\n\r\n\r\n\r\n"],
  "mappings": "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",
  "names": []
}
